From 973f08e16d02fea1dffc1c75f8f54eb58cb128cd Mon Sep 17 00:00:00 2001
From: Clayton Smith <argilo@gmail.com>
Date: Thu, 3 Sep 2020 22:08:07 -0400
Subject: [PATCH] Support for HDC variant

---
 frontend/main.c      |   3 +-
 include/neaacdec.h   |   4 +
 libfaad/Makefile.am  |   7 +-
 libfaad/bits.c       |   2 +-
 libfaad/bits.h       |   2 +-
 libfaad/common.c     |   5 +
 libfaad/common.h     |   6 ++
 libfaad/decoder.c    |  42 ++++++++
 libfaad/sbr_dec.c    |   4 +
 libfaad/sbr_dec.h    |   4 +
 libfaad/sbr_syntax.c |  16 +++-
 libfaad/syntax.c     | 223 +++++++++++++++++++++++++++++++++++++++++--
 libfaad/syntax.h     |   1 +
 13 files changed, 305 insertions(+), 14 deletions(-)

diff --git a/frontend/main.c b/frontend/main.c
index efaaccc..0430be5 100644
--- a/frontend/main.c
+++ b/frontend/main.c
@@ -1170,7 +1170,8 @@ static int faad_main(int argc, char *argv[])
                     if ((object_type != LC) &&
                         (object_type != MAIN) &&
                         (object_type != LTP) &&
-                        (object_type != LD))
+                        (object_type != LD) &&
+                        (object_type != HDC_LC))
                     {
                         showHelp = 1;
                     }
diff --git a/include/neaacdec.h b/include/neaacdec.h
index 8d52f74..82336b5 100644
--- a/include/neaacdec.h
+++ b/include/neaacdec.h
@@ -79,6 +79,7 @@ extern "C" {
 #define ER_LTP    19
 #define LD        23
 #define DRM_ER_LC 27 /* special object type for DRM */
+#define HDC_LC    127 /* non standard type for HDC */
 
 /* header types */
 #define RAW        0
@@ -225,6 +226,9 @@ NEAACDECAPI char NeAACDecInit2(NeAACDecHandle hDecoder,
 NEAACDECAPI char NeAACDecInitDRM(NeAACDecHandle *hDecoder, unsigned long samplerate,
                                  unsigned char channels);
 
+/* Init the library for HDC */
+NEAACDECAPI char NeAACDecInitHDC(NeAACDecHandle *hDecoder, unsigned long *samplerate);
+
 NEAACDECAPI void NeAACDecPostSeekReset(NeAACDecHandle hDecoder, long frame);
 
 NEAACDECAPI void NeAACDecClose(NeAACDecHandle hDecoder);
diff --git a/libfaad/Makefile.am b/libfaad/Makefile.am
index 9105625..02c9b44 100644
--- a/libfaad/Makefile.am
+++ b/libfaad/Makefile.am
@@ -1,4 +1,4 @@
-lib_LTLIBRARIES = libfaad.la libfaad_drm.la
+lib_LTLIBRARIES = libfaad.la libfaad_drm.la libfaad_hdc.la
 
 AM_CPPFLAGS	= -iquote $(top_srcdir)/include
 include_HEADERS = $(top_srcdir)/include/faad.h \
@@ -35,6 +35,11 @@ libfaad_drm_la_LIBADD = ${libfaad_la_LIBADD}
 libfaad_drm_la_CFLAGS = ${libfaad_la_CFLAGS} -DDRM_SUPPORT
 libfaad_drm_la_SOURCES = ${libfaad_la_SOURCES}
 
+libfaad_hdc_la_LDFLAGS = ${libfaad_la_LDFLAGS}
+libfaad_hdc_la_LIBADD = ${libfaad_la_LIBADD}
+libfaad_hdc_la_CFLAGS = ${libfaad_la_CFLAGS} -DHDC_SUPPORT
+libfaad_hdc_la_SOURCES = ${libfaad_la_SOURCES}
+
 pkgconfigdir = $(libdir)/pkgconfig
 pkgconfig_DATA = faad2.pc
 
diff --git a/libfaad/bits.c b/libfaad/bits.c
index 22c661d..f654e7a 100644
--- a/libfaad/bits.c
+++ b/libfaad/bits.c
@@ -228,7 +228,7 @@ uint8_t *faad_getbitbuffer(bitfile *ld, uint32_t bits
     return buffer;
 }
 
-#ifdef DRM
+#if defined(DRM) || defined(HDC)
 /* return the original data buffer */
 void *faad_origbitbuffer(bitfile *ld)
 {
diff --git a/libfaad/bits.h b/libfaad/bits.h
index c34dfe7..39eaed3 100644
--- a/libfaad/bits.h
+++ b/libfaad/bits.h
@@ -83,7 +83,7 @@ void faad_rewindbits(bitfile *ld);
 void faad_resetbits(bitfile *ld, int bits);
 uint8_t *faad_getbitbuffer(bitfile *ld, uint32_t bits
                        DEBUGDEC);
-#ifdef DRM
+#if defined(DRM) || defined(HDC)
 void *faad_origbitbuffer(bitfile *ld);
 uint32_t faad_origbitbuffer_size(bitfile *ld);
 #endif
diff --git a/libfaad/common.c b/libfaad/common.c
index cdfaece..8b6231e 100644
--- a/libfaad/common.c
+++ b/libfaad/common.c
@@ -166,6 +166,11 @@ int8_t can_decode_ot(const uint8_t object_type)
 #else
         return -1;
 #endif
+#endif
+
+#ifdef HDC
+    case HDC_LC:
+        return 0;
 #endif
     }
 
diff --git a/libfaad/common.h b/libfaad/common.h
index cacd1c4..d3b6781 100644
--- a/libfaad/common.h
+++ b/libfaad/common.h
@@ -95,6 +95,12 @@ extern "C" {
 #define DRM
 #define DRM_PS
 #endif
+/* Allow decoding of HDC */
+#ifdef HDC_SUPPORT
+#define DRM
+/* #define DRM_PS */
+#define HDC
+#endif
 
 /* LD can't do without LTP */
 #ifdef LD_DEC
diff --git a/libfaad/decoder.c b/libfaad/decoder.c
index c66c81f..060931a 100644
--- a/libfaad/decoder.c
+++ b/libfaad/decoder.c
@@ -349,6 +349,13 @@ long NeAACDecInit(NeAACDecHandle hpDecoder,
     if (!*samplerate)
         return -1;
 
+#ifdef HDC
+    if (hDecoder->config.defObjectType == HDC_LC)
+    {
+        hDecoder->object_type = hDecoder->config.defObjectType;
+    }
+#endif
+
 #if (defined(PS_DEC) || defined(DRM_PS))
     /* check if we have a mono file */
     if (*channels == 1)
@@ -528,6 +535,41 @@ char NeAACDecInitDRM(NeAACDecHandle *hpDecoder,
 }
 #endif
 
+#ifdef HDC
+char NeAACDecInitHDC(NeAACDecHandle *hpDecoder,
+                                 unsigned long *samplerate)
+{
+    NeAACDecStruct** hDecoder = (NeAACDecStruct**)hpDecoder;
+    if (hDecoder == NULL)
+        return 1; /* error */
+
+    NeAACDecClose(*hDecoder);
+
+    *hDecoder = NeAACDecOpen();
+
+    /* Special object type defined for HDC */
+    (*hDecoder)->config.defObjectType = HDC_LC;
+
+    (*hDecoder)->config.defSampleRate = *samplerate;
+#ifdef ERROR_RESILIENCE
+    (*hDecoder)->aacSectionDataResilienceFlag = 0;
+    (*hDecoder)->aacScalefactorDataResilienceFlag = 0;
+    (*hDecoder)->aacSpectralDataResilienceFlag = 0;
+#endif
+    (*hDecoder)->frameLength = 1024;
+    (*hDecoder)->sf_index = get_sr_index((*hDecoder)->config.defSampleRate);
+    (*hDecoder)->object_type = (*hDecoder)->config.defObjectType;
+
+    (*hDecoder)->channelConfiguration = 2;
+
+    *samplerate *= 2;
+    (*hDecoder)->forceUpSampling = 1;
+
+    (*hDecoder)->fb = filter_bank_init((*hDecoder)->frameLength);
+    return 0;
+}
+#endif
+
 void NeAACDecClose(NeAACDecHandle hpDecoder)
 {
     uint8_t i;
diff --git a/libfaad/sbr_dec.c b/libfaad/sbr_dec.c
index 2641c7b..e1a14ea 100644
--- a/libfaad/sbr_dec.c
+++ b/libfaad/sbr_dec.c
@@ -648,7 +648,11 @@ uint8_t sbrDecodeSingleFramePS(sbr_info *sbr, real_t *left_channel, real_t *righ
 
     /* perform parametric stereo */
 #ifdef DRM_PS
+#ifdef HDC
+    if (sbr->Is_DRM_SBR || sbr->Is_HDC_SBR)
+#else
     if (sbr->Is_DRM_SBR)
+#endif
     {
         drm_ps_decode(sbr->drm_ps, (sbr->ret > 0), X_left, X_right);
     } else {
diff --git a/libfaad/sbr_dec.h b/libfaad/sbr_dec.h
index cb8e3b9..74565f6 100644
--- a/libfaad/sbr_dec.h
+++ b/libfaad/sbr_dec.h
@@ -176,6 +176,10 @@ typedef struct
 #endif
 #endif
 
+#ifdef HDC
+    uint8_t Is_HDC_SBR;
+#endif
+
     uint8_t numTimeSlotsRate;
     uint8_t numTimeSlots;
     uint8_t tHFGen;
diff --git a/libfaad/sbr_syntax.c b/libfaad/sbr_syntax.c
index 29a6328..f61e254 100644
--- a/libfaad/sbr_syntax.c
+++ b/libfaad/sbr_syntax.c
@@ -154,6 +154,9 @@ uint8_t sbr_extension_data(bitfile *ld, sbr_info *sbr, uint16_t cnt,
 
 #ifdef DRM
     if (!sbr->Is_DRM_SBR)
+#endif
+#ifdef HDC
+    if (!sbr->Is_HDC_SBR)
 #endif
     {
         uint8_t bs_extension_type = (uint8_t)faad_getbits(ld, 4
@@ -247,6 +250,9 @@ uint8_t sbr_extension_data(bitfile *ld, sbr_info *sbr, uint16_t cnt,
 
 #ifdef DRM
     if (!sbr->Is_DRM_SBR)
+#endif
+#ifdef HDC
+    if (!sbr->Is_HDC_SBR)
 #endif
     {
         /* -4 does not apply, bs_extension_type is re-read in this function */
@@ -391,6 +397,12 @@ static uint8_t sbr_single_channel_element(bitfile *ld, sbr_info *sbr)
         faad_get1bit(ld);
     }
 #endif
+#ifdef HDC
+    if (sbr->Is_HDC_SBR)
+    {
+        faad_get1bit(ld);
+    }
+#endif
 
     if ((result = sbr_grid(ld, sbr, 0)) > 0)
         return result;
@@ -888,9 +900,9 @@ static uint16_t sbr_extension(bitfile *ld, sbr_info *sbr,
         return drm_ps_data(sbr->drm_ps, ld);
 #endif
     default:
-        sbr->bs_extension_data = (uint8_t)faad_getbits(ld, 6
+        sbr->bs_extension_data = (uint8_t)faad_getbits(ld, num_bits_left
             DEBUGVAR(1,279,"sbr_single_channel_element(): bs_extension_data"));
-        return 6;
+        return num_bits_left;
     }
 }
 
diff --git a/libfaad/syntax.c b/libfaad/syntax.c
index 5df254f..060b799 100644
--- a/libfaad/syntax.c
+++ b/libfaad/syntax.c
@@ -88,7 +88,7 @@ static uint8_t spectral_data(NeAACDecStruct *hDecoder, ic_stream *ics, bitfile *
                              int16_t *spectral_data);
 static uint16_t extension_payload(bitfile *ld, drc_info *drc, uint16_t count);
 static uint8_t pulse_data(ic_stream *ics, pulse_info *pul, bitfile *ld);
-static void tns_data(ic_stream *ics, tns_info *tns, bitfile *ld);
+static void tns_data(NeAACDecStruct *hDecoder, ic_stream *ics, tns_info *tns, bitfile *ld);
 #ifdef LTP_DEC
 static uint8_t ltp_data(NeAACDecStruct *hDecoder, ic_stream *ics, ltp_info *ltp, bitfile *ld);
 #endif
@@ -427,6 +427,102 @@ static void decode_cpe(NeAACDecStruct *hDecoder, NeAACDecFrameInfo *hInfo, bitfi
     hDecoder->fr_ch_ele++;
 }
 
+#ifdef HDC
+static void hdc_data_block(NeAACDecStruct *hDecoder, NeAACDecFrameInfo *hInfo,
+                    bitfile *ld, program_config *pce, drc_info *drc)
+{
+    uint8_t i, n;
+
+    hDecoder->fr_channels = 0;
+    hDecoder->fr_ch_ele = 0;
+    hDecoder->first_syn_ele = 25;
+    hDecoder->has_lfe = 0;
+
+    n = (uint8_t)faad_getbits(ld, LEN_SE_ID);
+    switch (n) {
+    case 0:
+        decode_sce_lfe(hDecoder, hInfo, ld, ID_SCE);
+        // FIXME ignore data afterwards, why?
+        return;
+    case 1:
+        decode_sce_lfe(hDecoder, hInfo, ld, ID_SCE);
+        break;
+    case 2:
+        decode_cpe(hDecoder, hInfo, ld, ID_CPE);
+        break;
+    case 5:
+    case 6:
+        decode_sce_lfe(hDecoder, hInfo, ld, ID_SCE);
+        break;
+    case 7:
+        decode_cpe(hDecoder, hInfo, ld, ID_CPE);
+        break;
+    default:
+        fprintf(stderr, "Unknown HDC block type: %d\n", n);
+        break;
+    }
+
+    if (hInfo->error > 0)
+        return;
+
+    // XXX immediately followed by SBR data, which was handled in decode_*
+
+    // NB we expect errors until we hit a valid first SBR block
+    if (hDecoder->sbr[0]->ret)
+        return;
+
+    while (faad_get_processed_bits(ld) + 8 <= faad_origbitbuffer_size(ld)*8)
+    {
+        n = (uint8_t)faad_getbits(ld, LEN_SE_ID);
+        if (n != ID_FIL)
+        {
+            fprintf(stderr, "Unexpected block type: %d, expected %d\n", n, ID_FIL);
+            break;
+        }
+
+        fill_element(hDecoder, ld, drc, 0);
+    }
+    return;
+}
+
+static uint8_t hdc_sbr_data_block(NeAACDecStruct *hDecoder, bitfile *ld)
+{
+    uint16_t count;
+    uint32_t bitsconsumed = faad_get_processed_bits(ld);
+    uint32_t buffer_size = faad_origbitbuffer_size(ld);
+
+    if (bitsconsumed > buffer_size*8)
+    {
+        return 14;
+    }
+
+    if (!hDecoder->sbr[0])
+    {
+        hDecoder->sbr[0] = sbrDecodeInit(hDecoder->frameLength,
+            hDecoder->element_id[0], 2*get_sample_rate(hDecoder->sf_index),
+            hDecoder->downSampledSBR
+#ifdef DRM
+            , 0
+#endif
+
+            );
+        hDecoder->sbr[0]->Is_HDC_SBR = 1;
+    }
+
+    count = (uint16_t)bit2byte(buffer_size*8 - bitsconsumed);
+
+    hDecoder->sbr[0]->ret = sbr_extension_data(ld, hDecoder->sbr[0], count, hDecoder->postSeekResetFlag);
+#if (defined(PS_DEC) || defined(DRM_PS))
+    if (hDecoder->sbr[0]->ps_used)
+    {
+        hDecoder->ps_used[0] = 1;
+        hDecoder->ps_used_global = 1;
+    }
+#endif
+    return 0;
+}
+#endif
+
 void raw_data_block(NeAACDecStruct *hDecoder, NeAACDecFrameInfo *hInfo,
                     bitfile *ld, program_config *pce, drc_info *drc)
 {
@@ -438,6 +534,14 @@ void raw_data_block(NeAACDecStruct *hDecoder, NeAACDecFrameInfo *hInfo,
     hDecoder->first_syn_ele = 25;
     hDecoder->has_lfe = 0;
 
+#ifdef HDC
+    if (hDecoder->object_type == HDC_LC)
+    {
+        hdc_data_block(hDecoder, hInfo, ld, pce, drc);
+        return;
+    }
+#endif
+
 #ifdef ERROR_RESILIENCE
     if (hDecoder->object_type < ER_OBJECT_START)
     {
@@ -609,13 +713,33 @@ static uint8_t single_lfe_channel_element(NeAACDecStruct *hDecoder, bitfile *ld,
     ic_stream *ics = &(sce.ics1);
     ALIGN int16_t spec_data[1024] = {0};
 
+#ifdef HDC
+    if (hDecoder->object_type == HDC_LC) {
+        sce.element_instance_tag = 0;
+    } else {
+#endif
     sce.element_instance_tag = (uint8_t)faad_getbits(ld, LEN_TAG
         DEBUGVAR(1,38,"single_lfe_channel_element(): element_instance_tag"));
+#ifdef HDC
+    }
+#endif
 
     *tag = sce.element_instance_tag;
     sce.channel = channel;
     sce.paired_channel = -1;
 
+#ifdef HDC
+    if (hDecoder->object_type == HDC_LC)
+    {
+        if ((retval = ics_info(hDecoder, ics, ld, 0)) > 0)
+            return retval;
+
+        /* get tns data */
+        if ((ics->tns_data_present = faad_get1bit(ld)) & 1)
+            tns_data(hDecoder, ics, &(ics->tns), ld);
+    }
+#endif
+
     retval = individual_channel_stream(hDecoder, &sce, ld, ics, 0, spec_data);
     if (retval > 0)
         return retval;
@@ -631,6 +755,16 @@ static uint8_t single_lfe_channel_element(NeAACDecStruct *hDecoder, bitfile *ld,
     {
         faad_flushbits(ld, LEN_SE_ID);
 
+#ifdef HDC
+        if (hDecoder->object_type == HDC_LC)
+        {
+            if (faad_getbits(ld, 1) && (retval = hdc_sbr_data_block(hDecoder, ld)) > 0)
+            {
+                return retval;
+            }
+        }
+        else
+#endif
         /* one sbr_info describes a channel_element not a channel! */
         if ((retval = fill_element(hDecoder, ld, hDecoder->drc, hDecoder->fr_ch_ele)) > 0)
         {
@@ -661,12 +795,27 @@ static uint8_t channel_pair_element(NeAACDecStruct *hDecoder, bitfile *ld,
     cpe.channel        = channels;
     cpe.paired_channel = channels+1;
 
+#ifdef HDC
+    if (hDecoder->object_type == HDC_LC) {
+        cpe.element_instance_tag = 0;
+    } else {
+#endif
     cpe.element_instance_tag = (uint8_t)faad_getbits(ld, LEN_TAG
         DEBUGVAR(1,39,"channel_pair_element(): element_instance_tag"));
+#ifdef HDC
+    }
+#endif
     *tag = cpe.element_instance_tag;
 
-    if ((cpe.common_window = faad_get1bit(ld
-        DEBUGVAR(1,40,"channel_pair_element(): common_window"))) & 1)
+#ifdef HDC
+    if (hDecoder->object_type == HDC_LC)
+        cpe.common_window = 1;
+    else
+#endif
+    cpe.common_window = faad_get1bit(ld
+        DEBUGVAR(1,40,"channel_pair_element(): common_window"));
+
+    if (cpe.common_window & 1)
     {
         /* both channels have common ics information */
         if ((result = ics_info(hDecoder, ics1, ld, cpe.common_window)) > 0)
@@ -718,6 +867,18 @@ static uint8_t channel_pair_element(NeAACDecStruct *hDecoder, bitfile *ld,
         ics1->ms_mask_present = 0;
     }
 
+#ifdef HDC
+    if (hDecoder->object_type == HDC_LC)
+    {
+        /* get tns data */
+        if ((ics1->tns_data_present = faad_get1bit(ld)) & 1)
+            tns_data(hDecoder, ics1, &(ics1->tns), ld);
+        /* get tns data */
+        if ((ics2->tns_data_present = faad_get1bit(ld)) & 1)
+            tns_data(hDecoder, ics2, &(ics2->tns), ld);
+    }
+#endif
+
     if ((result = individual_channel_stream(hDecoder, &cpe, ld, ics1,
         0, spec_data1)) > 0)
     {
@@ -759,6 +920,16 @@ static uint8_t channel_pair_element(NeAACDecStruct *hDecoder, bitfile *ld,
     {
         faad_flushbits(ld, LEN_SE_ID);
 
+#ifdef HDC
+        if (hDecoder->object_type == HDC_LC)
+        {
+            if (faad_getbits(ld, 1) && (result = hdc_sbr_data_block(hDecoder, ld)) > 0)
+            {
+                return result;
+            }
+        }
+        else
+#endif
         /* one sbr_info describes a channel_element not a channel! */
         if ((result = fill_element(hDecoder, ld, hDecoder->drc, hDecoder->fr_ch_ele)) > 0)
         {
@@ -788,10 +959,21 @@ static uint8_t ics_info(NeAACDecStruct *hDecoder, ic_stream *ics, bitfile *ld,
         DEBUGVAR(1,43,"ics_info(): ics_reserved_bit"));
     if (ics_reserved_bit != 0)
         return 32;
+#ifdef HDC
+    if (hDecoder->object_type == HDC_LC) {
+        ics->window_shape = faad_get1bit(ld
+            DEBUGVAR(1,45,"ics_info(): window_shape"));
+        ics->window_sequence = (uint8_t)faad_getbits(ld, 2
+            DEBUGVAR(1,44,"ics_info(): window_sequence"));
+    } else {
+#endif
     ics->window_sequence = (uint8_t)faad_getbits(ld, 2
         DEBUGVAR(1,44,"ics_info(): window_sequence"));
     ics->window_shape = faad_get1bit(ld
         DEBUGVAR(1,45,"ics_info(): window_shape"));
+#ifdef HDC
+    }
+#endif
 
 #ifdef LD_DEC
     /* No block switching in LD */
@@ -820,6 +1002,9 @@ static uint8_t ics_info(NeAACDecStruct *hDecoder, ic_stream *ics, bitfile *ld,
     if (ics->max_sfb > ics->num_swb)
         return 16;
 
+#ifdef HDC
+    if (hDecoder->object_type != HDC_LC)
+#endif
     if (ics->window_sequence != EIGHT_SHORT_SEQUENCE)
     {
         if ((ics->predictor_data_present = faad_get1bit(ld
@@ -1114,6 +1299,14 @@ static uint8_t fill_element(NeAACDecStruct *hDecoder, bitfile *ld, drc_info *drc
                 hDecoder->ps_used_global = 1;
             }
 #endif
+        } else if (bs_extension_type == 0) {
+            // padding
+            int i;
+            for (i = 0; i < count; i++)
+            {
+                if ((uint8_t)faad_getbits(ld, 8) != 0)
+                    fprintf(stderr, "sbr_extension_data: zero fil data not zero\n");
+            }
         } else {
 #endif
 #ifndef DRM
@@ -1298,12 +1491,12 @@ void DRM_aac_scalable_main_element(NeAACDecStruct *hDecoder, NeAACDecFrameInfo *
     }
     /* Stereo4 / Mono2 */
     if (ics1->tns_data_present)
-        tns_data(ics1, &(ics1->tns), ld);
+        tns_data(hDecoder, ics1, &(ics1->tns), ld);
     if (this_layer_stereo)
     {
         /* Stereo5 */
         if (ics2->tns_data_present)
-            tns_data(ics2, &(ics2->tns), ld);
+            tns_data(hDecoder, ics2, &(ics2->tns), ld);
     }
 
 #ifdef DRM
@@ -1516,6 +1709,9 @@ static uint8_t side_info(NeAACDecStruct *hDecoder, element *ele,
     ics->global_gain = (uint8_t)faad_getbits(ld, 8
         DEBUGVAR(1,67,"individual_channel_stream(): global_gain"));
 
+#ifdef HDC
+    if (hDecoder->object_type != HDC_LC)
+#endif
     if (!ele->common_window && !scal_flag)
     {
         if ((result = ics_info(hDecoder, ics, ld, ele->common_window)) > 0)
@@ -1528,6 +1724,9 @@ static uint8_t side_info(NeAACDecStruct *hDecoder, element *ele,
     if ((result = scale_factor_data(hDecoder, ics, ld)) > 0)
         return result;
 
+#ifdef HDC
+    if (hDecoder->object_type != HDC_LC)
+#endif
     if (!scal_flag)
     {
         /**
@@ -1550,7 +1749,7 @@ static uint8_t side_info(NeAACDecStruct *hDecoder, element *ele,
 #ifdef ERROR_RESILIENCE
             if (hDecoder->object_type < ER_OBJECT_START)
 #endif
-                tns_data(ics, &(ics->tns), ld);
+                tns_data(hDecoder, ics, &(ics->tns), ld);
         }
 
         /* get gain control data */
@@ -1611,10 +1810,13 @@ static uint8_t individual_channel_stream(NeAACDecStruct *hDecoder, element *ele,
     if (result > 0)
         return result;
 
+#ifdef HDC
+    if (hDecoder->object_type != HDC_LC)
+#endif
     if (hDecoder->object_type >= ER_OBJECT_START)
     {
         if (ics->tns_data_present)
-            tns_data(ics, &(ics->tns), ld);
+            tns_data(hDecoder, ics, &(ics->tns), ld);
     }
 
 #ifdef DRM
@@ -1939,7 +2141,7 @@ static uint8_t scale_factor_data(NeAACDecStruct *hDecoder, ic_stream *ics, bitfi
 }
 
 /* Table 4.4.27 */
-static void tns_data(ic_stream *ics, tns_info *tns, bitfile *ld)
+static void tns_data(NeAACDecStruct *hDecoder, ic_stream *ics, tns_info *tns, bitfile *ld)
 {
     uint8_t w, filt, i, start_coef_bits, coef_bits;
     uint8_t n_filt_bits = 2;
@@ -1955,6 +2157,11 @@ static void tns_data(ic_stream *ics, tns_info *tns, bitfile *ld)
 
     for (w = 0; w < ics->num_windows; w++)
     {
+#ifdef HDC
+        if (hDecoder->object_type == HDC_LC && ics->window_sequence != EIGHT_SHORT_SEQUENCE)
+            tns->n_filt[w] = 1;
+        else
+#endif
         tns->n_filt[w] = (uint8_t)faad_getbits(ld, n_filt_bits
             DEBUGVAR(1,74,"tns_data(): n_filt"));
 #if 0
diff --git a/libfaad/syntax.h b/libfaad/syntax.h
index 56bfbc4..b9dd44f 100644
--- a/libfaad/syntax.h
+++ b/libfaad/syntax.h
@@ -46,6 +46,7 @@ extern "C" {
 #define ER_LC     17
 #define ER_LTP    19
 #define DRM_ER_LC 27 /* special object type for DRM */
+#define HDC_LC    127 /* special object type for HDC */
 
 /* header types */
 #define RAW        0
-- 
2.25.1

